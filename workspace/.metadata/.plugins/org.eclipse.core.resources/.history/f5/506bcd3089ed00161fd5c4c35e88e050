import java.util.*;

public class Player {
	boolean error; // used to make sure the user enters a choice for the value
	// Creates a player's hand with two array lists, one containing the number
	// value of the card, the other containing the suit of the card (1 to 1
	// correlation between the number and suit)
	ArrayList<Integer> handNum = new ArrayList<Integer>();
	ArrayList<String> handSuit = new ArrayList<String>();
	// of the ace
	boolean playing, bust; // Used to determine if the player would like to keep
							// playing this hand
	private int total, aceChoice, cash, bet;
	Scanner u = new Scanner(System.in);

	// Constructor
	public Player() {
		playing = true;
		cash = 0;
	}

	// Method to determine if the player can still play, returns the current
	// amount of cash the player has, therefore the game will automatically quit
	// when there are no players left
	public void addCard(Card inCard) {
		handNum.add(inCard.getNum());
		handSuit.add(inCard.getSuit());
	}

	// Method to add cash to the users wallet
	public void addCash(int inCash) {
		cash += inCash;
	}

	public void canPlay(Player inDealer, int inPlayer) { // Determines if the
															// player can play
															// this hand or
		// not, and if so it will call the play hand method
		if (cash == 0) {
			playing = false; // If the player has no cash they cannot play
		} else {
			playing = true;
		}
		if (playing = true) {
			System.out.println("Turn: Player " + inPlayer);
			playHand(inDealer, inPlayer);
		}
	}

	public void getBet(int inPlayer) { // Has the player input what they would
										// like to bet
		bet = Integer.MAX_VALUE;
		while (bet > cash) {
			if (cash > 0) {
				System.out.println("Player " + inPlayer
						+ "   What would you like to bet on this hand? (Bets are taken in whole dollars only) You currently have $"
						+ cash);
				bet = u.nextInt();
				u.nextLine();
			}
		}

	}

	public int reBet() { // Returns the bet
		return bet;
	}

	public boolean getBust() {
		return bust;
	}

	public int getCash() { // Returns how much cash the player has
		return cash;
	}

	public boolean getPlaying() {
		if (cash == 0) {
			playing = false;
		}
		return playing;
	}

	public int getTotal() { // Returns the total points the player has for that
							// hand
		return total;
	}

	public void reset() { // Resets after the hand is done
		handNum.clear();
		handSuit.clear();
		total = 0;
	}

	public void playHand(Player inDealer, int inPlayer) { // Allows the user to
															// play a hand and
															// decide whether or
															// not to get dealt
															// more cards
		String yn; // yes or no
		inDealer.printHand(5, inDealer);
		printHand(inPlayer, inDealer);
		System.out.println("Your current point total is " + total);
		System.out.println("Would you like another card? (Enter 'Yes' or 'No')");
		yn = u.nextLine();
		System.out.println();
		if (yn.toLowerCase().equals("yes")) {
			playing = true;
		} else {
			playing = false;
		}
	}

	public void pointTotal(int inPlayerNum) { // Calculates the total value of
												// the cards in the
		// player's hand
		System.out.println();
		total = 0;
		for (int x = 0; x < handNum.size(); x++) {
			error = true;
			while (error) {
				switch (handNum.get(x)) {
				case 11:
					total += 10;
					error = false;
					break;
				case 12:
					total += 10;
					error = false;
					break;
				case 13:
					total += 10;
					error = false;
					break;
				case 14:
					if (inPlayerNum == 5) { // If the player is the dealer
						if ((total + 11) <= 31) {
							total += 11;
						} else {
							total += 1;
						}
					} else {
						System.out.println();
						System.out.println("Your current point total is: " + total
								+ " This does not include your Ace, would you like the ace to be worth 11 points or 1 point? (Enter 1 or 11");
						aceChoice = u.nextInt();
						u.nextLine();
						switch (aceChoice) { // Determines if the user would
												// like to
												// use the 11 point value or the
												// 1
												// for the ace
						case 1:
							total += 1;
							error = false;
							break;
						case 11:
							total += 11;
							error = false;
							break;
						default:
							System.out
									.println("Error, please make a choice for the value of your Ace. (Enter 1 or 11)");
							aceChoice = u.nextInt();
						}
					}
					break;
				default:
					total += handNum.get(x);
					error = false;
					break;

				}
			}
			if (total > 31) { // Sets the total to -1 if the player or dealer
								// busts (goes over 31)
				if (inPlayerNum == 5) {
					bust = true;
				} else {
					total = -1;
					System.out.println();
					System.out.println("You have gone over 31, BUST");
					playing = false;
				}

			}

		}

	}

	public void printHand(int playerNum, Player inDealer) {// Prints the
															// contents of the
															// player's
		// hand

		int start, end;
		if (playerNum == 5) { // Dealer is player 5 by default
			System.out.print("The dealer's hand consists of 2 face down cards and : ");
			start = inDealer.handNum.size() - 1;
			end = inDealer.handNum.size();

		} else {
			System.out.println("Player " + playerNum + " Your hand consists of: ");
			start = 0;
			end = handNum.size();
		}

		for (int x = start; x < end; x++) {
			switch (handNum.get(x)) { // Switch statement to determine if
			// the card dealt to the player was
			// a face card, and if so print out
			// the card's name instead of
			// number value
			case 11:
				System.out.print("Jack");
				break;
			case 12:
				System.out.print("Queen");
				break;
			case 13:
				System.out.print("King");
				break;
			case 14:
				System.out.print("Ace");
				break;
			default:
				System.out.print(handNum.get(x));
			}
			System.out.print(" of " + handSuit.get(x) + ", ");
		}
		pointTotal(playerNum);
		if (playing = true && playerNum != 5) {
			System.out.println("For a total of: " + total);
		}
		System.out.println();
	}

	public void win() { // win the bet, so the bet amount is added to the
						// players cash
		cash += bet;
	}

	public void lose() { // lose the bet, so the bet is removed from the players
							// cash
		cash -= bet;
	}

}
