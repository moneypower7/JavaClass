import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;

public class CircleLinkedList {
	Node first = new Node(1);
	Node current = first;
	Node last = first;
	int candidates;

	public CircleLinkedList(int n) { // Constructs the circular doubly linked
										// list with N nodes
		for (int x = 2; x <= n; x++) {
			addItem(x);
		}
		candidates = n;
	}

	public void addItem(int inPol) { // adds an item to the end of the doubly
										// linked list
		Node temp = new Node(inPol);
		last.setNext(temp);
		temp.setPrev(last);
		temp.setNext(first); // Creates a circularly linked list
		last = temp;
		first.setPrev(last);
	}

	public void deleteItem(int pol) { // Deletes an item with the politician
										// value of the parameter
		current = first;
		if (first.getNext() != last) {
			while (pol != current.getPol()) {
				current = current.getNext();
			}
			if (current.getPol() == last.getPol()){
				last = current.getPrev();
			}
			if (current.getPol() == first.getPol()){
				first = current.getNext();
			}
			current.getPrev().setNext(current.getNext());
			current.getNext().setPrev(current.getPrev());
			
		} else {
			first = null;
			last = null;
		}
		candidates -= 1;
	}

	public int getCandidates() {
		return candidates;
	}

	// Carries out the candidate selection process
	public void candidateSelection(int n, int k, int m) throws FileNotFoundException, UnsupportedEncodingException {
		PrintWriter writer = new PrintWriter("LinkedListProgram.txt", "UTF-8");
		Node selectorK, selectorM;
		selectorK = first;
		selectorM = last;
		if (m == 0) {
			m = 1;
		}
		if (m > n) {
			m = m % n;
		}
		for (int x = 1; x <= k; x++) { // Selector k : Selector k will start at
										// candidate 1 (first candidate) and
										// will move around the circle of
										// candidates clockwise counting off
										// candidates until it counts k
										// candidates and then stop pointing at
										// the kth candidate.
			selectorK = selectorK.getNext();
		}
		for (int x = n; x >= 1; x--) {
			selectorM = selectorM.getPrev();
		}
		if (selectorK.getPol() == selectorM.getPol()) {
			writer.println(selectorK.getPol());
			deleteItem(selectorK.getPol());
		} else {
			System.out.println("sss");
			writer.println(selectorK.getPol() + " s" + selectorM.getPol());
			deleteItem(selectorK.getPol());
			deleteItem(selectorM.getPol());
		}
		writer.close();
	}

}
